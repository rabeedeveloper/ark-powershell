((g,api,jsdk)=>{

   api.cache={};
   api.cache.beans=[];

/***
*
*    Factory
*/
   class Factory {
        constructor(){
           this.started=new Date();
        }
        ids(){
          return api.cache.beans.map((b)=>b.id);
        }
        setBean(id,instance,scope){
          scope=scope || g.øScope.meta._enum[0];
          if(arguments.length===1){
            instance=id;
            id=this.generateId();
          }
          api.cache.beans.push({id:id,bean:instance,_class:instance.constructor,scope:scope});
        }
        getItem(id){
          return api.cache.beans.filter((b)=>b.id===id) ;
        }
        getBean(id){
          let filter=this.getItem(id);
          if(filter.length){
            if(!filter[0].scope || filter[0].scope==='singleton'){
               return filter[0].bean;
            }else if(scope ==='prototype'){
                return Factory.clone(filter[0].bean);
            }

          }
        }

        getClass(id){
            let filter=this.getItem(id);
            if(filter.length){
              return filter[0]._class;
            }
        }
        generateId(){
             let id=Math.random().toString(36).substring(7);
             while(this.ids().indexOf(id)>=0){
               id=Math.random().toString(36).substring(7);
             }
             return id;
        }

        CoC(){
          return this['CoC_'+arguments.length+'_'+Array.from(arguments).map((arg)=>typeof arg).join('_')](...arguments);
        }
        CoC_1_function(_arrow){
          let name;
            try {

              name= _arrow()().arrow().name.uncapitalize();

            } catch (e) {
              name=  _arrow().name.uncapitalize();
            }finally {
              console.log('naming...',name)
              return name;
            }

        }

        static clone(o){
              return (typeof o === 'object')?(Array.isArray(o) ?o.map(e=>clone(e)):Object.keys(o).reduce(
                  (r,k)=>(r[k]=this.clone(o[k]), r), {})):o;
        }


   };
   api.models={};
   api.models.Factory=Factory;

   api.RbFactory=new Factory();
   /**====================
   * Dependency Injection
   */

   g.øAutowired=function(attrBeanId){
     g.øQualifier(attrBeanId,attrBeanId);
   };
   g.øQualifier=function(attr,beanId){
     /**
     * Depreceated with ES6
     */
     arguments.callee.caller[attr] = api.RbFactory.getBean(beanId);
   }

   g.øScope=function(scope,arrow){

        return ()=>{return {'scope':scope,'arrow':arrow}};

   };
   g.øScope.meta={};
   g.øScope.meta._enum=['singleton','prototype','request','session','globalSession'];

  /**
  *  Decorators;
  */

  g.øComponent=function(id,options,fn){
       let args=g.øComponent.meta.fillArgs(...arguments);
       //args.fn=g.øComponent.meta.Extends(args.fn);
       let scope;
       try {
         //if øScope used
         scope=args.fn().scope;
         args.fn=args.fn().arrow();
       } catch (e) {

       }
       api.RbFactory.setBean(args.id,g.øComponent.meta.generateBean(args.fn,args.options),scope);

  }
    g.øComponent.meta={};
    g.øComponent.meta.fillArgs=function(){
      let obj={};
      if(arguments.length===1){
        obj.fn=arguments[0]();
        obj.id=api.RbFactory.CoC(arguments[0]);
        obj.options={};
      }
      if(arguments.length === 2){
           obj.fn=arguments[1]();
          if(typeof arguments[0]==='object'){
            obj.id=api.RbFactory.CoC(arguments[1]);
            obj.options=arguments[0];

          }else if(typeof arguments[0]==='string'){
              obj.id=arguments[0];
              obj.options={};

          }
      }
      if(arguments.length===3){
        obj.id=arguments[0];
        obj.options=arguments[1];
        obj.fn=arguments[2]();
      }
      return obj;
    }

    g.øComponent.meta.generateBean=function(_class,options){
         let bean=new _class();
         for(var attr in options){
           bean[attr]=options[attr];
         }
         return bean;
    };
    g.øComponent.meta.Extends=function(ChildClass){
         let Parent=require('../components/Component.js');
         Object.getOwnPropertyNames( Parent.prototype ).forEach((method)=>{
              ChildClass.prototype[method]=Parent.prototype[method];
         });
         return ChildClass;
    }


  module.exports=api;
})(global,{},require('x-class'))
