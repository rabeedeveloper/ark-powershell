/**
*  RabeeJS
*   rabee-aop module : Aspect+ advise+joinpoint
*  @author Abdennour TOUMI <http://abdennoor.com>
*  Copyright (c) 2016-2017
*/

((g,api)=>{
   /**=======META============
   *  meta
   *
   */

   api.enum={};
   api.enum.advices=['before','after','after-return','after-throw','around'];
   api.enum.joinpoints=['method called','exception thrown','prop/attr modified'];

   api.enum.pointcut='';
   api.advices={};
   /**
   *   advice=before
   *    before(pointcuts)
   */
  //---------INterface ---------
  api.before=function(classArr,methodArr,callback){
        if(!(classArr instanceof Array)){classArr=[classArr];}
        if(!(methodArr instanceof Array)){methodArr=[methodArr];}
        classArr.forEach((cls,i)=>{
          methodArr.forEach((mthd,j)=>{

              api.advices.before(cls,mthd,callback);
          });
        })
  };
   //---------Advices-----------
   api.advices.before=function(_class,method,callback){
           var old_method=_class.prototype[method];
            _class.prototype[method]=function(){
                  this.__aop__={'class':_class,method:method};  
                   if(callback.apply(this,arguments) !==false){
                       return old_method.apply(this,arguments);
                   }
             };
   };

   api.advices.after=function(_class,method,callback){
           var old_method=_class.prototype[method];
            _class.prototype[method]=function(){
                   var result=old_method.apply(this,arguments);
                   callback.apply(this,arguments);
                   return result;
             };
   };
   api.advices.after_return=function(_class,method,callback){
           var old_method=_class.prototype[method];
            _class.prototype[method]=function(){
              var result=old_method.apply(this,arguments);
              callback.call(this,result,arguments);
              return result;
             };
   };
   api.advices.after_throw=function(_class,method,callback){
           var old_method=_class.prototype[method];
            _class.prototype[method]=function(){
                   try {
                      return old_method.apply(this,arguments);
                   } catch (e) {
                     callback.call(this,e,arguments);
                   } finally {
                       return old_method.apply(this,arguments);
                   }
             };
   };
   api.advices.around=function(_class,method,callback_before,callback_after){
           var old_method=_class.prototype[method];
            _class.prototype[method]=function(){
                   callback_before.apply(this,arguments);
                   var result=old_method.apply(this,arguments);
                   callback_after.apply(this,arguments);
                   return result;
             };
   };



   //-----------------------AOP CONTAINER --------
   //---------weaving----
   /**
   *  @param advice object {when:'before',what:{class:,method}}
   *  @param pointcuts  array []
   */
   api.weaver=function(advice,_class,method,cb1,cb2){
        let exist=_class && typeof _class[method] ==='function';
        let args=arguments;
        let job=setInterval(()=>{
               if(exist){
                clearInterval(job);
                 api.weaverStart(...args);
               }else{
                 exist=_class && typeof _class[method] ==='function';
               }
        },1);
   };
   /**
   *
   */
   api.weaverStart=function(advice,_class,method,cb1,cb2){

   };

   module.exports=api;
})(global,{})
